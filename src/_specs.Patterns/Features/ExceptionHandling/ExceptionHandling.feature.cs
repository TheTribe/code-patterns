// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.55
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Patterns.Specifications.Features.ExceptionHandling
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.55")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Exception Handling")]
    public partial class ExceptionHandlingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExceptionHandling.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Exception Handling", "As a developer, I want to be able to isolate the scope of error-prone code,\r\nand " +
                    "I want the ability to either rely on a basic error handling policy,\r\nor provide " +
                    "my own logic to respond to exceptions.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have prepared a test subject");
#line 8
 testRunner.And("I have subscribed to all observable feeds on the subject");
#line 9
 testRunner.And("I have set the default error handling behavior to record all errors for the test");
#line 10
 testRunner.And("I have created an observable feed for test errors");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("normal property read")]
        [NUnit.Framework.CategoryAttribute("trackReads")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void NormalPropertyRead()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("normal property read", new string[] {
                        "trackReads",
                        "trackErrors"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 15
 testRunner.When("I try to read a property value from the subject");
#line 16
 testRunner.Then("the value that I read should be the value I expected");
#line 17
 testRunner.And("the feed for property read requests should have returned 1 item");
#line 18
 testRunner.And("the feed for property read responses should have returned 1 item");
#line 19
 testRunner.And("the feed for errors should have returned 0 items");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("normal property write")]
        [NUnit.Framework.CategoryAttribute("trackWrites")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void NormalPropertyWrite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("normal property write", new string[] {
                        "trackWrites",
                        "trackErrors"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 24
 testRunner.When("I try to write to a property value on the subject");
#line 25
 testRunner.And("I try to read a property value from the subject");
#line 26
 testRunner.Then("the value that I read should be the value I wrote");
#line 27
 testRunner.And("the feed for property write requests should have returned 1 item");
#line 28
 testRunner.And("the feed for errors should have returned 0 items");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("normal method call")]
        [NUnit.Framework.CategoryAttribute("trackCalls")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void NormalMethodCall()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("normal method call", new string[] {
                        "trackCalls",
                        "trackErrors"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 33
 testRunner.When("I try to call a method on the subject");
#line 34
 testRunner.Then("the method call should complete with no errors");
#line 35
 testRunner.And("the feed for method call requests should have returned 1 item");
#line 36
 testRunner.And("the feed for method call responses should have returned 1 item");
#line 37
 testRunner.And("the feed for errors should have returned 0 items");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("angry property read")]
        [NUnit.Framework.CategoryAttribute("trackReads")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void AngryPropertyRead()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("angry property read", new string[] {
                        "trackReads",
                        "trackErrors"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 42
 testRunner.When("I try to read a value that throws an exception from the subject");
#line 43
 testRunner.Then("the value I read should be the default value for the return type");
#line 44
 testRunner.And("the feed for property read requests should have returned 1 item");
#line 45
 testRunner.And("the feed for property read responses should have returned 0 items");
#line 46
 testRunner.And("the feed for errors should have returned 1 item");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("angry property write")]
        [NUnit.Framework.CategoryAttribute("trackWrites")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void AngryPropertyWrite()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("angry property write", new string[] {
                        "trackWrites",
                        "trackErrors"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 51
 testRunner.When("I try to write to a property value that throws an exception on the subject");
#line 52
 testRunner.And("I try to read a property value from the subject");
#line 53
 testRunner.Then("the value that I read should be the value I expected");
#line 54
 testRunner.And("the feed for property write requests should have returned 1 item");
#line 55
 testRunner.And("the feed for errors should have returned 1 item");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("angry method call")]
        [NUnit.Framework.CategoryAttribute("trackCalls")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void AngryMethodCall()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("angry method call", new string[] {
                        "trackCalls",
                        "trackErrors"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 60
 testRunner.When("I try to call a method that throws an exception on the subject");
#line 61
 testRunner.Then("the method call should abort");
#line 62
 testRunner.And("the feed for method call requests should have returned 1 item");
#line 63
 testRunner.And("the feed for method call responses should have returned 0 items");
#line 64
 testRunner.And("the feed for errors should have returned 1 item");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("angry property read with error handling")]
        [NUnit.Framework.CategoryAttribute("trackReads")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void AngryPropertyReadWithErrorHandling()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("angry property read with error handling", new string[] {
                        "trackReads",
                        "trackErrors"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 69
 testRunner.Given("I have a custom error handler that does not write to the error feed");
#line 70
 testRunner.When("I try to read a value that throws an exception from the subject");
#line 71
 testRunner.Then("the value I read should be the default value for the return type");
#line 72
 testRunner.And("the feed for property read requests should have returned 1 item");
#line 73
 testRunner.And("the feed for property read responses should have returned 0 items");
#line 74
 testRunner.And("the feed for errors should have returned 0 items");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("angry property write with error handling")]
        [NUnit.Framework.CategoryAttribute("trackWrites")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void AngryPropertyWriteWithErrorHandling()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("angry property write with error handling", new string[] {
                        "trackWrites",
                        "trackErrors"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 79
 testRunner.Given("I have a custom error handler that does not write to the error feed");
#line 80
 testRunner.When("I try to write to a property value that throws an exception on the subject");
#line 81
 testRunner.And("I try to read a property value from the subject");
#line 82
 testRunner.Then("the value that I read should be the value I expected");
#line 83
 testRunner.And("the feed for property write requests should have returned 1 item");
#line 84
 testRunner.And("the feed for errors should have returned 0 items");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("angry method call with error handling")]
        [NUnit.Framework.CategoryAttribute("trackCalls")]
        [NUnit.Framework.CategoryAttribute("trackErrors")]
        public virtual void AngryMethodCallWithErrorHandling()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("angry method call with error handling", new string[] {
                        "trackCalls",
                        "trackErrors"});
#line 88
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 89
 testRunner.Given("I have a custom error handler that does not write to the error feed");
#line 90
 testRunner.When("I try to call a method that throws an exception on the subject");
#line 91
 testRunner.Then("the method call should abort");
#line 92
 testRunner.And("the feed for method call requests should have returned 1 item");
#line 93
 testRunner.And("the feed for method call responses should have returned 0 items");
#line 94
 testRunner.And("the feed for errors should have returned 0 items");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
